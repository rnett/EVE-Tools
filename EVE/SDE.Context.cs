//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EVE
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SDEEntities : DbContext
    {
        public SDEEntities()
            : base("name=SDEEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<industryactivity> industryactivities { get; set; }
        public virtual DbSet<industryactivitymaterial> industryactivitymaterials { get; set; }
        public virtual DbSet<industryactivityprobability> industryactivityprobabilities { get; set; }
        public virtual DbSet<industryactivityproduct> industryactivityproducts { get; set; }
        public virtual DbSet<invmarketgroup> invmarketgroups { get; set; }
        public virtual DbSet<invtype> invtypes { get; set; }
        public virtual DbSet<industryblueprint> industryblueprints { get; set; }
        public virtual DbSet<ore> ores { get; set; }
    
        [DbFunction("SDEEntities", "GetBlueprint")]
        public virtual IQueryable<industryactivity> GetBlueprint(Nullable<int> productTypeID, Nullable<int> activityID)
        {
            var productTypeIDParameter = productTypeID.HasValue ?
                new ObjectParameter("productTypeID", productTypeID) :
                new ObjectParameter("productTypeID", typeof(int));
    
            var activityIDParameter = activityID.HasValue ?
                new ObjectParameter("activityID", activityID) :
                new ObjectParameter("activityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<industryactivity>("[SDEEntities].[GetBlueprint](@productTypeID, @activityID)", productTypeIDParameter, activityIDParameter);
        }
    
        [DbFunction("SDEEntities", "GetBlueprintMaterials")]
        public virtual IQueryable<industryactivitymaterial> GetBlueprintMaterials(Nullable<int> blueprintTypeID, Nullable<int> activityID)
        {
            var blueprintTypeIDParameter = blueprintTypeID.HasValue ?
                new ObjectParameter("blueprintTypeID", blueprintTypeID) :
                new ObjectParameter("blueprintTypeID", typeof(int));
    
            var activityIDParameter = activityID.HasValue ?
                new ObjectParameter("activityID", activityID) :
                new ObjectParameter("activityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<industryactivitymaterial>("[SDEEntities].[GetBlueprintMaterials](@blueprintTypeID, @activityID)", blueprintTypeIDParameter, activityIDParameter);
        }
    
        [DbFunction("SDEEntities", "GetMats")]
        public virtual IQueryable<industryactivitymaterial> GetMats(Nullable<int> productTypeID, Nullable<int> activityID)
        {
            var productTypeIDParameter = productTypeID.HasValue ?
                new ObjectParameter("productTypeID", productTypeID) :
                new ObjectParameter("productTypeID", typeof(int));
    
            var activityIDParameter = activityID.HasValue ?
                new ObjectParameter("activityID", activityID) :
                new ObjectParameter("activityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<industryactivitymaterial>("[SDEEntities].[GetMats](@productTypeID, @activityID)", productTypeIDParameter, activityIDParameter);
        }
    
        [DbFunction("SDEEntities", "GetTypeFromID")]
        public virtual IQueryable<invtype> GetTypeFromID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<invtype>("[SDEEntities].[GetTypeFromID](@id)", idParameter);
        }
    
        [DbFunction("SDEEntities", "GetTypeFromName")]
        public virtual IQueryable<invtype> GetTypeFromName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<invtype>("[SDEEntities].[GetTypeFromName](@name)", nameParameter);
        }
    
        [DbFunction("SDEEntities", "GetTypesLikeName")]
        public virtual IQueryable<invtype> GetTypesLikeName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<invtype>("[SDEEntities].[GetTypesLikeName](@name)", nameParameter);
        }
    
        [DbFunction("SDEEntities", "GetOreFromID")]
        public virtual IQueryable<ore> GetOreFromID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ore>("[SDEEntities].[GetOreFromID](@id)", idParameter);
        }
    }
}
