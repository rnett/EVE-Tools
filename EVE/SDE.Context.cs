//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SDEModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SDEEntities : DbContext
    {
        public SDEEntities()
            : base("name=SDEEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<industryActivity> industryActivities { get; set; }
        public virtual DbSet<industryActivityMaterial> industryActivityMaterials { get; set; }
        public virtual DbSet<industryActivityProduct> industryActivityProducts { get; set; }
        public virtual DbSet<industryBlueprint> industryBlueprints { get; set; }
        public virtual DbSet<invMarketGroup> invMarketGroups { get; set; }
        public virtual DbSet<invTypeMaterial> invTypeMaterials { get; set; }
        public virtual DbSet<invType> invTypes { get; set; }
        public virtual DbSet<mapConstellationJump> mapConstellationJumps { get; set; }
        public virtual DbSet<mapConstellation> mapConstellations { get; set; }
        public virtual DbSet<mapRegion> mapRegions { get; set; }
        public virtual DbSet<mapSolarSystemJump> mapSolarSystemJumps { get; set; }
        public virtual DbSet<mapSolarSystem> mapSolarSystems { get; set; }
        public virtual DbSet<ore> ores { get; set; }
        public virtual DbSet<skill> skills { get; set; }
        public virtual DbSet<dgmAttributeType> dgmAttributeTypes { get; set; }
        public virtual DbSet<dgmTypeAttribute> dgmTypeAttributes { get; set; }
        public virtual DbSet<dgmEffect> dgmEffects { get; set; }
        public virtual DbSet<dgmTypeEffect> dgmTypeEffects { get; set; }
        public virtual DbSet<dgmEffectsModifierInfo> dgmEffectsModifierInfoes { get; set; }
        public virtual DbSet<invCategory> invCategories { get; set; }
        public virtual DbSet<invGroup> invGroups { get; set; }
    
        [DbFunction("SDEEntities", "GetAttribute")]
        public virtual IQueryable<GetAttribute_Result> GetAttribute(Nullable<int> typeID, Nullable<int> attributeID)
        {
            var typeIDParameter = typeID.HasValue ?
                new ObjectParameter("typeID", typeID) :
                new ObjectParameter("typeID", typeof(int));
    
            var attributeIDParameter = attributeID.HasValue ?
                new ObjectParameter("attributeID", attributeID) :
                new ObjectParameter("attributeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetAttribute_Result>("[SDEEntities].[GetAttribute](@typeID, @attributeID)", typeIDParameter, attributeIDParameter);
        }
    
        [DbFunction("SDEEntities", "GetBlueprintMaterials")]
        public virtual IQueryable<industryActivityMaterial> GetBlueprintMaterials(Nullable<int> blueprintTypeID, Nullable<int> activityID)
        {
            var blueprintTypeIDParameter = blueprintTypeID.HasValue ?
                new ObjectParameter("blueprintTypeID", blueprintTypeID) :
                new ObjectParameter("blueprintTypeID", typeof(int));
    
            var activityIDParameter = activityID.HasValue ?
                new ObjectParameter("activityID", activityID) :
                new ObjectParameter("activityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<industryActivityMaterial>("[SDEEntities].[GetBlueprintMaterials](@blueprintTypeID, @activityID)", blueprintTypeIDParameter, activityIDParameter);
        }
    
        [DbFunction("SDEEntities", "GetMats")]
        public virtual IQueryable<industryActivityMaterial> GetMats(Nullable<int> productTypeID, Nullable<int> activityID)
        {
            var productTypeIDParameter = productTypeID.HasValue ?
                new ObjectParameter("productTypeID", productTypeID) :
                new ObjectParameter("productTypeID", typeof(int));
    
            var activityIDParameter = activityID.HasValue ?
                new ObjectParameter("activityID", activityID) :
                new ObjectParameter("activityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<industryActivityMaterial>("[SDEEntities].[GetMats](@productTypeID, @activityID)", productTypeIDParameter, activityIDParameter);
        }
    
        [DbFunction("SDEEntities", "GetOreFromID")]
        public virtual IQueryable<ore> GetOreFromID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ore>("[SDEEntities].[GetOreFromID](@id)", idParameter);
        }
    
        [DbFunction("SDEEntities", "GetSkillFromID")]
        public virtual IQueryable<skill> GetSkillFromID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<skill>("[SDEEntities].[GetSkillFromID](@id)", idParameter);
        }
    
        [DbFunction("SDEEntities", "GetSystemFromID")]
        public virtual IQueryable<mapSolarSystem> GetSystemFromID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<mapSolarSystem>("[SDEEntities].[GetSystemFromID](@id)", idParameter);
        }
    
        [DbFunction("SDEEntities", "GetSystemFromName")]
        public virtual IQueryable<mapSolarSystem> GetSystemFromName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<mapSolarSystem>("[SDEEntities].[GetSystemFromName](@name)", nameParameter);
        }
    
        [DbFunction("SDEEntities", "GetTypeFromID")]
        public virtual IQueryable<invType> GetTypeFromID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<invType>("[SDEEntities].[GetTypeFromID](@id)", idParameter);
        }
    
        [DbFunction("SDEEntities", "GetTypeFromName")]
        public virtual IQueryable<invType> GetTypeFromName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<invType>("[SDEEntities].[GetTypeFromName](@name)", nameParameter);
        }
    
        [DbFunction("SDEEntities", "GetTypesLikeName")]
        public virtual IQueryable<invType> GetTypesLikeName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<invType>("[SDEEntities].[GetTypesLikeName](@name)", nameParameter);
        }
    
        [DbFunction("SDEEntities", "GetBlueprintProducts")]
        public virtual IQueryable<industryActivityProduct> GetBlueprintProducts(Nullable<int> blueprintTypeID, Nullable<int> activityID)
        {
            var blueprintTypeIDParameter = blueprintTypeID.HasValue ?
                new ObjectParameter("blueprintTypeID", blueprintTypeID) :
                new ObjectParameter("blueprintTypeID", typeof(int));
    
            var activityIDParameter = activityID.HasValue ?
                new ObjectParameter("activityID", activityID) :
                new ObjectParameter("activityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<industryActivityProduct>("[SDEEntities].[GetBlueprintProducts](@blueprintTypeID, @activityID)", blueprintTypeIDParameter, activityIDParameter);
        }
    
        [DbFunction("SDEEntities", "GetBlueprintActivity")]
        public virtual IQueryable<industryActivity> GetBlueprintActivity(Nullable<int> blueprintTypeID, Nullable<int> activityID)
        {
            var blueprintTypeIDParameter = blueprintTypeID.HasValue ?
                new ObjectParameter("blueprintTypeID", blueprintTypeID) :
                new ObjectParameter("blueprintTypeID", typeof(int));
    
            var activityIDParameter = activityID.HasValue ?
                new ObjectParameter("activityID", activityID) :
                new ObjectParameter("activityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<industryActivity>("[SDEEntities].[GetBlueprintActivity](@blueprintTypeID, @activityID)", blueprintTypeIDParameter, activityIDParameter);
        }
    }
}
